{"version":3,"sources":["service/unsplashApi.js","component/SearchPhoto/index.js","App.js","serviceWorker.js","index.js"],"names":["unsplashApi","axios","create","baseURL","timeout","headers","Authorization","SearchPhoto","searchPhoto","setState","loading","window","history","pushState","encodeURIComponent","state","searchString","page","perPage","get","search","then","result","data","catch","err","finally","searchPhotoDebounce","debounce","handleChangeSearchString","e","currentTarget","value","handleChangePage","listPhoto","style","margin","results","map","photo","key","id","span","padding","href","links","html","target","className","src","urls","thumb","alt","alt_description","urlParams","URLSearchParams","location","Number","this","placeholder","onChange","tip","delay","simple","current","defaultPageSize","total","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"2XAEMA,E,OAAcC,EAAMC,OAAO,CAC/BC,QAAS,4BACTC,QAAS,IACTC,QAAS,CACPC,cAAe,2DC8DJC,E,kDA7Db,aAAe,IAAD,uBACZ,gBAgBFC,YAAc,WACZ,EAAKC,SAAS,CAAEC,SAAS,IACzBC,OAAOC,QAAQC,UAAU,KAAM,KAA/B,wBAAsDC,mBAAmB,EAAKC,MAAMC,cAApF,iBAA0G,EAAKD,MAAME,ODhBnG,SAACD,GAA0C,IAA5BC,EAA2B,uDAApB,EAAGC,EAAiB,uDAAP,GACvD,OAAOlB,EAAYmB,IAAZ,+BAAwCL,mBAAmBE,GAA3D,iBAAiFC,EAAjF,qBAAkGC,ICgBvGE,CAAO,EAAKL,MAAMC,aAAc,EAAKD,MAAME,MAAMI,MAAK,SAAAC,GACpD,EAAKb,SAAS,CAAEc,KAAMD,EAAOC,UAC5BC,OAAM,SAAAC,OAENC,SAAQ,WACT,EAAKjB,SAAS,CAAEC,SAAS,QAzBf,EA4BdiB,oBAAsBC,mBAAS,EAAKpB,YAAa,KA5BnC,EA6BdqB,yBAA2B,SAAAC,GACzB,EAAKrB,SAAS,CAAEO,aAAcc,EAAEC,cAAcC,MAAOf,KAAM,GAAK,EAAKU,sBA9BzD,EAgCdM,iBAAmB,SAAAhB,GACjB,EAAKR,SAAS,CAAEQ,QAAQ,EAAKT,cAjCjB,EAmCd0B,UAAY,kBACV,kBAAC,IAAD,CAAKC,MAAO,CAAEC,QAAS,KACpB,EAAKrB,MAAMQ,KAAKc,QAAQC,KACvB,SAAAC,GAAK,OAAI,kBAAC,IAAD,CAAKC,IAAKD,EAAME,GAAIC,KAAM,EAAGP,MAAO,CAAEQ,QAAS,KACtD,uBAAGC,KAAML,EAAMM,MAAMC,KAAMC,OAAO,UAChC,yBAAKC,UAAU,QAAQC,IAAKV,EAAMW,KAAKC,MAAOC,IAAKb,EAAMc,yBAtCjE,IAAMC,EAAY,IAAIC,gBAAgB5C,OAAO6C,SAASpC,QAF1C,OAGZ,EAAKL,MAAQ,CACXL,UAAW4C,EAAUnC,IAAI,gBACzBH,aAAcsC,EAAUnC,IAAI,iBAAmB,GAC/CF,KAAMwC,OAAOH,EAAUnC,IAAI,UAAY,EACvCI,KAAM,CACJc,QAAS,KARD,E,iEAaRqB,KAAK3C,MAAMC,cACb0C,KAAKlD,gB,+BAiCP,OACE,yBAAKwC,UAAU,gBACb,kBAAC,IAAD,CAAOW,YAAY,qCAAqC3B,MAAO0B,KAAK3C,MAAMC,aAAc4C,SAAUF,KAAK7B,2BACvG,yBAAMmB,UAAU,sBACfU,KAAK3C,MAAML,QAAU,kBAAC,IAAD,CAAMmD,IAAI,aAAaC,MAAO,KACjDJ,KAAKxB,aACEwB,KAAKxB,aAEf,kBAAC,IAAD,CAAY6B,QAAM,EAACC,QAASN,KAAK3C,MAAME,KAAMgD,gBAAiB,GAAIC,MAAOR,KAAK3C,MAAMQ,KAAK2C,MAAON,SAAUF,KAAKzB,wB,GAxD7FkC,IAAMC,WCSjBC,MAXf,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BAGA,kBAAC,EAAD,QCEcsB,QACW,cAA7B3D,OAAO6C,SAASe,UAEe,UAA7B5D,OAAO6C,SAASe,UAEhB5D,OAAO6C,SAASe,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEd1D,OAAM,SAAA2D,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ea80a79.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst unsplashApi = axios.create({\r\n  baseURL: 'https://api.unsplash.com/',\r\n  timeout: 1000,\r\n  headers: {\r\n    Authorization: \"Client-ID NnCKhkA_GXY8YUfZGaUXJNYCfiba-4QeKYFH1Oxedrs\"\r\n  }\r\n});\r\n\r\nexport const search = (searchString, page = 1, perPage = 16) => {\r\n  return unsplashApi.get(`/search/photos?query=${encodeURIComponent(searchString)}&page=${page}&per_page=${perPage}`);\r\n};\r\n\r\nexport const getPhoto = id => {\r\n  return unsplashApi.get(`/photos/${id}`);\r\n};\r\n\r\nexport default unsplashApi;","import React from 'react';\r\nimport { Pagination, Input, Row, Col, Spin } from 'antd';\r\nimport { debounce } from 'lodash';\r\nimport './style.css';\r\nimport { search } from '../../service/unsplashApi';\r\n\r\nclass SearchPhoto extends React.Component {\r\n  constructor() {\r\n    super();\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    this.state = {\r\n      loading: !!urlParams.get('searchString'),\r\n      searchString: urlParams.get('searchString') || \"\",\r\n      page: Number(urlParams.get('page')) || 1,\r\n      data: {\r\n        results: []\r\n      }\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    if (this.state.searchString) {\r\n      this.searchPhoto();\r\n    }\r\n  }\r\n  searchPhoto = () => {\r\n    this.setState({ loading: true });\r\n    window.history.pushState(null, null, `?searchString=${encodeURIComponent(this.state.searchString)}&page=${this.state.page}`);\r\n    search(this.state.searchString, this.state.page).then(result => {\r\n      this.setState({ data: result.data });\r\n    }).catch(err => {\r\n      // todo\r\n    }).finally(() => {\r\n      this.setState({ loading: false });\r\n    });\r\n  };\r\n  searchPhotoDebounce = debounce(this.searchPhoto, 200);\r\n  handleChangeSearchString = e => {\r\n    this.setState({ searchString: e.currentTarget.value, page: 1 }, this.searchPhotoDebounce);\r\n  };\r\n  handleChangePage = page => {\r\n    this.setState({ page }, this.searchPhoto);\r\n  };\r\n  listPhoto = () => (\r\n    <Row style={{ margin: -10 }}>\r\n      {this.state.data.results.map(\r\n        photo => <Col key={photo.id} span={6} style={{ padding: 10 }}>\r\n          <a href={photo.links.html} target=\"_blank\">\r\n            <img className=\"photo\" src={photo.urls.thumb} alt={photo.alt_description}/>\r\n          </a>\r\n        </Col>\r\n      )}\r\n    </Row>\r\n  );\r\n  render() {\r\n    return (\r\n      <div className=\"search-photo\">\r\n        <Input placeholder=\"Type something to search for image\" value={this.state.searchString} onChange={this.handleChangeSearchString} />\r\n        <div  className=\"list-photo-wrapper\">\r\n        {this.state.loading ? <Spin tip=\"Loading...\" delay={100} >\r\n          {this.listPhoto()}\r\n        </Spin> : this.listPhoto()}\r\n        </div>\r\n        <Pagination simple current={this.state.page} defaultPageSize={16} total={this.state.data.total} onChange={this.handleChangePage} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPhoto;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SearchPhoto from './component/SearchPhoto';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        SWAT UNSPLASH TAKE HOME\r\n      </header>\r\n      <SearchPhoto />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}